module tmxi

    use ccsd_transformed_integrals
    use cc3_intermediates
    use s_gen
    use basis
    
    implicit none
    !
    ! File generated automatcally on 2012-06-05 21:40:21
    !
    contains
    
    function xinu1_ai(Obs, t2, t1,nocc, nactive, a,i) 
    double precision :: xinu1_ai
    double precision, dimension(:,:) :: Obs
    double precision, dimension(nocc+1:nactive,nocc+1:nactive,nocc,nocc), intent(in) :: t2 
    double precision, dimension(nocc+1:nactive,nocc), intent(in)                  :: t1 
    integer, intent(in) :: nocc, nactive
    integer, intent(in) :: a,i 
    integer :: s ,c,k 
    double precision, dimension(0:4) :: term 
    term = 0.d+0 
    do c = nocc + 1, nactive 
term(0) = term(0) + t1(c,i) * Obs(a, c)
end do 


do k = 1, nocc 
term(1) = term(1) + t1(a,k) * Obs(i, k)
end do 

term(1) = -term(1) 

term(2) = term(2) + Obs(a, i)


do k = 1, nocc 
do c = nocc + 1, nactive 
term(3) = term(3) + t2(a,c,i,k) * Obs(c, k)
end do 
end do 

term(3) = term(3) * 2.0d+0 

do c = nocc + 1, nactive 
do k = 1, nocc 
term(4) = term(4) + t2(a,c,k,i) * Obs(c, k)
end do 
end do 

term(4) = -term(4) 


    xinu1_ai = 0.d+0 
    do s = 0, 4
    xinu1_ai = xinu1_ai + term(s)
    end do

    end function xinu1_ai
    
    function xinu2_aibj(Obs, t2, t1,nocc, nactive, a,i,b,j) 
    double precision :: xinu2_aibj
    double precision, dimension(:,:) :: Obs
    double precision, dimension(nocc+1:nactive,nocc+1:nactive,nocc,nocc), intent(in) :: t2 
    double precision, dimension(nocc+1:nactive,nocc), intent(in)                  :: t1 
    integer, intent(in) :: nocc, nactive
    integer, intent(in) :: a,i,b,j 
    integer :: s ,k,c 
    double precision, dimension(0:7) :: term 
    term = 0.d+0 
    do k = 1, nocc 
do c = nocc + 1, nactive 
term(0) = term(0) + t1(c,j) * t2(a,b,i,k) * Obs(c, k)
term(1) = term(1) + t1(c,i) * t2(a,b,k,j) * Obs(c, k)
end do 
end do 

term(0) = -term(0) 
term(1) = -term(1) 

do c = nocc + 1, nactive 
do k = 1, nocc 
term(2) = term(2) + t1(b,k) * t2(a,c,i,j) * Obs(c, k)
term(3) = term(3) + t1(a,k) * t2(b,c,j,i) * Obs(c, k)
end do 
end do 

term(2) = -term(2) 
term(3) = -term(3) 

do c = nocc + 1, nactive 
term(4) = term(4) + t2(a,c,i,j) * Obs(b, c)
term(5) = term(5) + t2(b,c,j,i) * Obs(a, c)
end do 


do k = 1, nocc 
term(6) = term(6) + t2(a,b,i,k) * Obs(j, k)
term(7) = term(7) + t2(a,b,k,j) * Obs(i, k)
end do 

term(6) = -term(6) 
term(7) = -term(7) 


    xinu2_aibj = 0.d+0 
    do s = 0, 7
    xinu2_aibj = xinu2_aibj + term(s)
    end do

    end function xinu2_aibj
    
    function xinu2_aibi(Obs, t2, t1,nocc, nactive, a,i,b) 
    double precision :: xinu2_aibi
    double precision, dimension(:,:) :: Obs
    double precision, dimension(nocc+1:nactive,nocc+1:nactive,nocc,nocc), intent(in) :: t2 
    double precision, dimension(nocc+1:nactive,nocc), intent(in)                  :: t1 
    integer, intent(in) :: nocc, nactive
    integer, intent(in) :: a,i,b 
    integer :: s ,c,k 
    double precision, dimension(0:7) :: term 
    term = 0.d+0 
    do c = nocc + 1, nactive 
term(0) = term(0) + t2(a,c,i,i) * Obs(b, c)
term(1) = term(1) + t2(b,c,i,i) * Obs(a, c)
end do 


do k = 1, nocc 
term(2) = term(2) + t2(a,b,i,k) * Obs(i, k)
term(3) = term(3) + t2(a,b,k,i) * Obs(i, k)
end do 

term(2) = -term(2) 
term(3) = -term(3) 

do k = 1, nocc 
do c = nocc + 1, nactive 
term(4) = term(4) + t1(c,i) * t2(a,b,i,k) * Obs(c, k)
term(5) = term(5) + t1(c,i) * t2(a,b,k,i) * Obs(c, k)
end do 
end do 

term(4) = -term(4) 
term(5) = -term(5) 

do c = nocc + 1, nactive 
do k = 1, nocc 
term(6) = term(6) + t1(b,k) * t2(a,c,i,i) * Obs(c, k)
term(7) = term(7) + t1(a,k) * t2(b,c,i,i) * Obs(c, k)
end do 
end do 

term(6) = -term(6) 
term(7) = -term(7) 


    xinu2_aibi = 0.d+0 
    do s = 0, 7
    xinu2_aibi = xinu2_aibi + term(s)
    end do

    end function xinu2_aibi
    
    function xinu2_aiaj(Obs, t2, t1,nocc, nactive, a,i,j) 
    double precision :: xinu2_aiaj
    double precision, dimension(:,:) :: Obs
    double precision, dimension(nocc+1:nactive,nocc+1:nactive,nocc,nocc), intent(in) :: t2 
    double precision, dimension(nocc+1:nactive,nocc), intent(in)                  :: t1 
    integer, intent(in) :: nocc, nactive
    integer, intent(in) :: a,i,j 
    integer :: s ,k,c 
    double precision, dimension(0:7) :: term 
    term = 0.d+0 
    do k = 1, nocc 
do c = nocc + 1, nactive 
term(0) = term(0) + t1(c,j) * t2(a,a,i,k) * Obs(c, k)
term(1) = term(1) + t1(c,i) * t2(a,a,j,k) * Obs(c, k)
end do 
end do 

term(0) = -term(0) 
term(1) = -term(1) 

do c = nocc + 1, nactive 
do k = 1, nocc 
term(2) = term(2) + t1(a,k) * t2(a,c,i,j) * Obs(c, k)
term(3) = term(3) + t1(a,k) * t2(a,c,j,i) * Obs(c, k)
end do 
end do 

term(2) = -term(2) 
term(3) = -term(3) 

do c = nocc + 1, nactive 
term(4) = term(4) + t2(a,c,i,j) * Obs(a, c)
term(5) = term(5) + t2(a,c,j,i) * Obs(a, c)
end do 


do k = 1, nocc 
term(6) = term(6) + t2(a,a,i,k) * Obs(j, k)
term(7) = term(7) + t2(a,a,j,k) * Obs(i, k)
end do 

term(6) = -term(6) 
term(7) = -term(7) 


    xinu2_aiaj = 0.d+0 
    do s = 0, 7
    xinu2_aiaj = xinu2_aiaj + term(s)
    end do

    end function xinu2_aiaj
    
    function xinu2_aiai(Obs, t2, t1,nocc, nactive, a,i) 
    double precision :: xinu2_aiai
    double precision, dimension(:,:) :: Obs
    double precision, dimension(nocc+1:nactive,nocc+1:nactive,nocc,nocc), intent(in) :: t2 
    double precision, dimension(nocc+1:nactive,nocc), intent(in)                  :: t1 
    integer, intent(in) :: nocc, nactive
    integer, intent(in) :: a,i 
    integer :: s ,c,k 
    double precision, dimension(0:3) :: term 
    term = 0.d+0 
    do c = nocc + 1, nactive 
term(0) = term(0) + t2(a,c,i,i) * Obs(a, c)
end do 


do k = 1, nocc 
term(1) = term(1) + t2(a,a,i,k) * Obs(i, k)
end do 

term(1) = -term(1) 

do k = 1, nocc 
do c = nocc + 1, nactive 
term(2) = term(2) + t1(c,i) * t2(a,a,i,k) * Obs(c, k)
end do 
end do 

term(2) = -term(2) 

do c = nocc + 1, nactive 
do k = 1, nocc 
term(3) = term(3) + t1(a,k) * t2(a,c,i,i) * Obs(c, k)
end do 
end do 

term(3) = -term(3) 


    xinu2_aiai = 0.d+0 
    do s = 0, 3
    xinu2_aiai = xinu2_aiai + term(s)
    end do

    end function xinu2_aiai
    
    end module tmxi
    